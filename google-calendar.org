* Copyrights

  #+BEGIN_SRC emacs-lisp
    ;; Copyright (C) 2013 Baptiste Fouques
    ;;
    ;; Author: Baptiste Fouques
    ;; Created: Mars 2013
    ;; Version: 1.0
    ;; Keywords: calendar, org, google
    ;;
    ;; Google calendar  for Org  is free  software; you  can redistribute  it and/or
    ;; modify it under the  terms of the GNU General Public  License as published by
    ;; the Free Software Foundation; either version 3, or (at your option) any later
    ;; version.
    ;;
    ;; Google calendar for  Org is distributed in  the hope that it  will be useful,
    ;; but   WITHOUT  ANY   WARRANTY;   without  even   the   implied  warranty   of
    ;; MERCHANTABILITY or  FITNESS FOR  A PARTICULAR PURPOSE.   See the  GNU General
    ;; Public License for more details.
    ;;
    ;; You should have received a copy of the GNU General Public License
    ;; along with GNU Emacs; see the file COPYING.  If not, write to
    ;; the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    ;; Boston, MA 02111-1307, USA.

    ;; Options
    ;;   customization is found in the groupe 'google-calendar'
    ;;   M-x customize-group google-calendar
  #+END_SRC

* Provides

  This package provides operations :
  - google-calendar/get-calendar :: retrieve the list of all your calendars
  - google/calendar/fetch-calendars  :: retrieve  the content  of calendars  you
       specified in /google-calendar/file-associations/

* Dependencies

  This library depends on :
  - google-contacts
  - json

    #+BEGIN_SRC emacs-lisp :results none
      (require 'google-oauth)
      (require 'json)
    #+END_SRC

* Constants and customization

** Customization

   #+BEGIN_SRC emacs-lisp :results none
     (defgroup google-calendar nil "Org sync with Google Calendar")

     (defcustom google-calendar/expire-time 3600
       "Time in seconds to keep entries in cache"
       :group 'google-calendar
       :type 'integer)

     (defcustom  google-calendar/calendars-files "~/Org/google-calendars.org"
       "Org formated file created to reflect google calendars properties"
       :group 'google-calendar
       :type 'string)

     (defcustom google-calendar/events-order-by "startTime"
       "Order events by start time or date of update"
       :group 'google-calendar
       :type '(choice (const :tag "Start" "startTime")
                      (const :tag "Updated" "update")))

     (defcustom google-calendar/up-days 30
       "Number of days to get events before today"
       :group 'google-calendar
       :type 'integer)

     (defcustom google-calendar/down-days 365
       "Number of days to get events after today"
       :group 'google-calendar
       :type 'integer)

     (defcustom google-calendar/file-associations nil
       "list of association '(calendar-id file) to synchronize at once

     for calendar id, look in your calendars-file after a call to get-calendar"
       :group 'google-calendar
       :type '(repeat (list :tag "Calendar and file" (string :tag "Calendar Id") (file :tag "Org file"))))
   #+END_SRC

** Authentification constants

   #+BEGIN_SRC emacs-lisp :results none
     (defconst google-calendar/resource-url "https://www.googleapis.com/auth/calendar"
       "URL used to request access to calendar resources.")

     (defconst google-calendar/oauth-client-id "443695031406-ummfm7mbqhu5iehqejq59b7lq99ik1bd.apps.googleusercontent.com"
       "Client ID for OAuth.")

     (defconst google-calendar/oauth-client-secret "z5RWcm6lC0EyCVy6NHxuk5hR"
       "Google calendar secret key. Please don't tell anyone.
     I AM SERIOUS!")

     (defconst google-calendar/key-url (concat "?key=" google-calendar/oauth-client-secret))
   #+END_SRC

* OAuth2 access

** Use google contact /google-oauth/ library

   #+BEGIN_SRC emacs-lisp :results none
     (defun google-calendar/oauth-token ()
       "Get OAuth token to access Google contacts."
       (google-oauth-auth-and-store
        google-calendar/resource-url
        google-calendar/oauth-client-id
        google-calendar/oauth-client-secret))
   #+END_SRC

*** COMMENT Test

    #+BEGIN_SRC emacs-lisp :results none
    ;; (google-calendar/oauth-token)
    #+END_SRC

    #+RESULTS:

* Manage dates

  #+BEGIN_SRC emacs-lisp :results none

    (defun google-calendar/decode (date)
      (when (and (stringp date) (not (string= date "")))
        (format-time-string (org-time-stamp-format t) (date-to-time date))))

    (defun google-calendar/relative-time (delta)
      (let* ((now (current-time))
             (delta-time (days-to-time delta))
             (computed-date (time-add now delta-time)))
        (format-time-string "%Y-%m-%dT00:00:00Z" computed-date)))


    (defun google-calendar/get-start-end (org-date-range)
      (let ((start nil)(end nil))
      (string-match "\\(<[^>]+?>\\)--\\(<[^>]+>\\)" org-date-range)
      (setq start (match-string 1 org-date-range))
      (setq end (match-string 2 org-date-range))

      (list (org-parse-time-string start) (org-parse-time-string end))))
  #+END_SRC

* Access to google data

** Retrieve data from url

   #+BEGIN_SRC emacs-lisp :results none
     (defun google-calendar/url-post (url &optional data token)
       "Send HTTP request at URL using POST with DATA.
     Return the server answer buffer"
       (let ((url-request-method "POST")
             (url-request-data data)
             (buf (oauth2-url-retrieve-synchronously (or token
                                                         (google-calendar/oauth-token))
                                                     url)))
         buf))

     (defun google-calendar/url-retrieve (url &optional token)
       "Retrieve URL using cache if possible."
       (let ((url-cache-expire-time google-calendar/expire-time))
         (if (url-cache-expired url)
             (let ((buf (oauth2-url-retrieve-synchronously (or token
                                                               (google-calendar/oauth-token))
                                                           url)))
               ;; This is `url-store-in-cache' modified so it uses
               ;; `google-contacts-resource-url' to store the cache file as the
               ;; current URL, rathen than the URL with the access token.
               (with-current-buffer buf
                 (let ((fname (url-cache-create-filename url)))
                   (if (url-cache-prepare fname)
                       (let ((coding-system-for-write 'binary))
                         (write-region (point-min) (point-max) fname nil 5)))))
               buf)
           (url-fetch-from-cache url))))

     (defun google-calendar/http-data (buffer)
       "Return HTTP data from BUFFER."
       (with-current-buffer buffer
         (goto-char (point-min))
         (search-forward "\n\n" nil t)
         (let ((headers (buffer-substring (point-min) (point))))
           (if (string-match-p "^Content-Type:.* charset=UTF-8" headers)
               (set-buffer-multibyte t)
             (set-buffer-multibyte nil))
           (if (string-match-p "^HTTP/1.1 200 OK" headers)
               (let ((data (buffer-substring (point) (point-max))))
                 (kill-buffer)
                 data)
             (not (kill-buffer))))))

     (defun google-calendar/http-plist (buffer)
       "Parse the JSON data from buffer to a plist"
       (let ((json-object-type 'plist)
             (data (google-calendar/http-data buffer)))
         (when data (json-read-from-string data))))

     (defun google-calendar/url-data (url &optional token)
       "Return HTTP data from URL, using cache if possible"
       (google-calendar/http-data (google-calendar/url-retrieve url token)))

     (defun google-calendar/url-plist (url &optional token)
       "Return plist from URL, using cache if possible"
       (google-calendar/http-plist (google-calendar/url-retrieve url token)))

   #+END_SRC

*** COMMENT Test

    #+BEGIN_SRC emacs-lisp :results none
      ;; (google-calendar/url-plist (concat "https://www.googleapis.com/calendar/v3/users/me/calendarList" google-calendar/key-url))
    #+END_SRC

** Get calendars informations

*** Calendars constants

    #+BEGIN_SRC emacs-lisp :results none
      (defconst google-calendar/calendars-url "https://www.googleapis.com/calendar/v3/users/me/calendarList")
      (defconst google-calendar/single-calendar-url "https://www.googleapis.com/calendar/v3/calendars/")

      (defconst google-calendar/calendar-item-format
        "* %s
        :PROPERTIES:
        :ID: %s
        :END:

      %s

      (%s - %s)
      ")

      (defconst google-calendar/calendar-item-format-unselected
        "* COMMENT %s
        :PROPERTIES:
        :ID: %s
        :END:

      %s

      (%s - %s)
      ")
    #+END_SRC

*** Get data

   Get  general informations  on available  calendars and  put them  in the  org
   formated files ~google-calendar/calendars-files~.

   #+BEGIN_SRC emacs-lisp :results none
     (defun google-calendar/fetch-calendar (calendar-id)
       (google-calendar/url-plist
        (concat google-calendar/single-calendar-url calendar-id google-calendar/key-url)))

     (defun google-calendar/get-calendar ()
       "Insert in calendars file usefull informations on user calendars"
       (interactive)
       (let* ((calendars (google-calendar/url-plist (concat google-calendar/calendars-url google-calendar/key-url)))
              (calendars-items (plist-get calendars ':items))
              )
         (find-file-other-window google-calendar/calendars-files)
         (erase-buffer)
         (setq calendars-items (append calendars-items nil))
         (setq calendars-items (sort calendars-items 'google-calendar/calendar<))
         (mapcar 'google-calendar/get-calendar-item calendars-items))
         (save-buffer)
         (message (concat "Pull calendar list to " google-calendar/calendars-files)))

     (defun google-calendar/get-calendar-item (item)
       "Put usefull information on one calendar into current buffer"
       (let ((id (plist-get item ':id))
             (summary (plist-get item ':summary))
             (description (plist-get item ':description))
             (location (plist-get item ':location))
             (timeZone (plist-get item ':timeZone))
             (hidden (plist-get item ':hidden))
             (selected (plist-get item ':selected))
             (out ""))
         (unless hidden
           (if selected
               (setq out (format google-calendar/calendar-item-format
                                 summary id description location timeZone))
             (setq out (format google-calendar/calendar-item-format-unselected
                               summary id description location timeZone))))
         (insert out)
         )
     )

     (defun google-calendar/calendar< (a b)
       "Sort two calendars, on primary, role and id"
       (let ((a-primary (plist-get a ':primary))
             (b-primary (plist-get b ':primary))
             (a-role (plist-get a ':accessRole))
             (b-role (plist-get b ':accessRole))
             (a-id (plist-get a ':id))
             (b-id (plist-get b ':id)))
         (cond
          ((and a-primary (not b-primary)))
          ((and b-primary (not a-primary)) nil)
          ((and (string= a-role "owner") (not (string= b-role "owner"))))
          ((and (string= b-role "owner") (not (string= a-role "owner"))) nil)
          ((and (string= a-role "writer") (not (string= b-role "writer"))))
          ((and (string= b-role "writer") (not (string= a-role "writer"))) nil)
          ((string< a-id b-id)))))
   #+END_SRC

*** COMMENT Test
    #+BEGIN_SRC emacs-lisp
      ;; (google-calendar/get-calendar)
    #+END_SRC

** Get events from one calendar

*** Events constants

    #+BEGIN_SRC emacs-lisp :results none
      (defconst google-calendar/events-url "https://www.googleapis.com/calendar/v3/calendars/%s/events")

      (defconst google-calendar/event-item-format-cancelled
        "* CANCELLED %s
        :PROPERTIES:
        :ID: %s
        :LOCATION: %s
        :CREATOR: %s <%s>
        :END:

        %s--%s

        [[Google Link][%s]]

        %s

      ")
      (defconst google-calendar/event-item-format
        "* %s
        :PROPERTIES:
        :ID: %s
        :LOCATION: %s
        :CREATOR: %s <%s>
        :END:

        %s--%s

        [[Google Link][%s]]

        %s

      ")
    #+END_SRC

*** Get data

    #+BEGIN_SRC emacs-lisp :results none
      (defun google-calendar/fetch-one-page (calendar-id token &optional last-update)
        (if token
            (let* ((events-url (format google-calendar/events-url calendar-id))
                   (events (google-calendar/url-plist (concat events-url google-calendar/key-url "&pagetoken="token))))
              events)
            (let* ((events-url (format google-calendar/events-url calendar-id))
                   (full-url
                    (concat events-url google-calendar/key-url
                            ; "&orderBy="google-calendar/events-order-by
                            "&singleEvents=True"
                            "&timeMin="(google-calendar/relative-time (- google-calendar/up-days))
                            "&timeMax="(google-calendar/relative-time google-calendar/down-days)
                            (when last-update (concat "&updatedMin=" last-update))))
                   (events (google-calendar/url-plist full-url)))
              events)))

      (defun google-calendar/fetch-events (calendar-id &optional last-update)
        "Fetch all events pages"

        (let* ((events (google-calendar/fetch-one-page calendar-id nil last-update))
               (next (plist-get events ':nextPageToken))
               (items (plist-get events ':items)))
          (setq items (append items nil))
          (while next
            (let* ((n_events (google-calendar/fetch-one-page calendar-id next))
                   (n_next (plist-get n_events ':nextPageToken))
                   (n_items (plist-get n_events ':items)))
              (setq n_items (append n_items nil))
              (setq items (append items n_items))
              (setq next n_next)))
          items))

      (defun google-calendar/get-events (calendar-id file)
        "Insert in file informations on events from calendar"
        (let* ((events-items (google-calendar/fetch-events calendar-id)))
          (setq events-items (append events-items nil))
          ;; (setq events-items (reverse (sort events-items 'google-calendar/event<)))

          (find-file-other-window file)
          (erase-buffer)

          (mapcar 'google-calendar/get-events-item events-items)
          )
        (save-buffer)
        (message (concat "pull " calendar-id " into org file " file)))

      (defun google-calendar/event< (a b)
        "Sort two events on start time, end time and id"
        (let* ((a-start (plist-get a ':start))
               (a-startTime (plist-get a-start ':dateTime))
               (a-end (plist-get a ':end))
               (a-endTime (plist-get a-end ':dateTime))
               (a-id (plist-get a ':id))
               (b-start (plist-get b ':start))
               (b-startTime (plist-get b-start ':dateTime))
               (b-end (plist-get b ':end))
               (b-endTime (plist-get b-end ':dateTime))
               (b-id (plist-get b ':id)))
          (cond ((string< a-startTime b-startTime))
                ((string< b-startTime a-startTime) nil)
                ((string< a-endTime b-endTime))
                ((string< b-endTime a-endTime) nil)
                ((string< a-id b-id)))))

      (defun google-calendar/get-events-item (item)
        "Put usefull informations on one event into current buffer"
        (let* ((id (plist-get item ':id))
               (cancelled (string= (plist-get item ':status) "cancelled"))
               (link (plist-get item ':htmlList))
               (summary (plist-get item ':summary))
               (description (plist-get item ':description))
               (location (plist-get item ':location))
               (creator (plist-get item ':creator))
               (creator-name (plist-get creator ':displayName))
               (creator-email (plist-get creator ':email))
               (start (plist-get item ':start))
               (start-date (plist-get start ':date))
               (start-dateTime (plist-get start ':dateTime))
               (start-dateTime-decoded (google-calendar/decode start-dateTime))
               (end (plist-get item ':end))
               (end-date (plist-get end ':date))
               (end-dateTime (plist-get end ':dateTime))
               (end-dateTime-decoded (google-calendar/decode end-dateTime))
               (attendees (plist-get item ':attendees))
               (out ""))

          (if summary
              (if cancelled
                  (setq out (format google-calendar/event-item-format-cancelled
                                    summary
                                    id location creator-name creator-email
                                    (if start-dateTime start-dateTime-decoded start-date)
                                    (if end-dateTime end-dateTime-decoded end-date)
                                    link
                                    description))
                (setq out (format google-calendar/event-item-format
                                  summary
                                  id location creator-name creator-email
                                  (if start-dateTime start-dateTime-decoded start-date)
                                  (if end-dateTime end-dateTime-decoded end-date)
                                  link
                                  description))))
          (insert out)))

    #+END_SRC

**** COMMENT Test

     #+BEGIN_SRC emacs-lisp
       ;; (google-calendar/get-events "xxxx@xxxx.com" "~/test.org")
       ;;  (google-calendar/fetch-events "xxxx@xxxxx.com")
       ;;  (google-calendar/fetch-one-page "xxxx@xxxx.com" nil)
     #+END_SRC

** Batch pull from google calendars

   Get and pull into files several calendars at once.

   #+BEGIN_SRC emacs-lisp :results none
     (defun google-calendar/fetch-calendars ()
       "Fetch calendars into org files as defined into google-calendar/file-associacions"
       (interactive)

       (mapcar (lambda (x) (google-calendar/get-events (nth 0 x) (nth 1 x)))
               google-calendar/file-associations))
   #+END_SRC


* COMMENT Sync with /org-sync/

** Depends on /org-sync/

   see [[http://orgmode.org/w/?p%3Dorg-sync.git%3Ba%3Dsummary][os git repo]].

   #+BEGIN_SRC emacs-lisp
     (require 'org-element)
     (add-to-list 'load-path "/home/fouques/src/org-sync-3f5ab4c")
     (require 'os)
   #+END_SRC

** Add our os backend in list

   #+BEGIN_SRC emacs-lisp :results none
     (add-to-list 'os-backend-alist (cons "google.com/calendar/.+" 'os-google-calendar))

     (defvar os-google-calendar nil
       "Google calendar backend to org-sync [os]")
     (setq os-google-calendar
       '((base-url      . google-calendar/os-base-url)
         (fetch-buglist . google-calendar/os-fetch-buglist)
         (send-buglist  . google-calendar/os-send-buglist)))
   #+END_SRC

** Define base /url/ from passing /url/

   #+BEGIN_SRC emacs-lisp results: none
     (defun google-calendar/os-base-url (url)
       "Compute google calendar API base url from os-sync url argument.

     os-sync url argument should be of the form http://www.google.com/calendar/id with
     id the actual calendar id"

       (when (string-match "google.com/calendar/\\([^/]+\\)" url)
         (let ((calendar-id (match-string 1 url)))
                calendar-id)))

     ;; (google-calendar/os-base-url "http://www.google.com/calendar/xxxxxxxx")
   #+END_SRC

** Fetch events and convert them to /os/ /bugs list/

   #+BEGIN_SRC emacs-lisp results: none
     (defun google-calendar/os-fetch-buglist (last-update &optional calendar-id)
       (let ((calendar (google-calendar/fetch-calendar
                        (if calendar-id calendar-id os-base-url)))
             (events (google-calendar/fetch-events
                      (if calendar-id calendar-id os-base-url) last-update))
             (since last-update))
         (unless events (setq events (google-calendar/fetch-events
                                      (if calendar-id calendar-id os-base-url)))
                 (setq since nil))
         (append
          `(:title ,(plist-get calendar ':summary))
          `(:id ,(plist-get calendar ':id))
          `(:bugs ,(mapcar 'google-calendar/os-event-to-bug events))
          (when since `(:since since)))))

     (defun google-calendar/os-event-to-bug (item)
       "Convert an Google event to an Org-sync 'bug'"

       (let* ((id (plist-get item ':id))
              (status-string (plist-get item ':status))
              (status
               (if (string= status-string "tentative") 'tentative
                 (if (string= status-string "confirmed") 'confirmed
                   (if (string= status-string "cancelled") 'cancelled))))
              (link (plist-get item ':htmlList))
              (summary (plist-get item ':summary))
              (description (plist-get item ':description))
              (location (plist-get item ':location))
              (creator (plist-get item ':creator))
              (creator-name (plist-get creator ':displayName))
              (creator-email (plist-get creator ':email))
              (organizer (plist-get item ':organizer))
              (organizer-name (plist-get organizer ':displayName))
              (organizer-email (plist-get organizer ':email))
              (start (plist-get item ':start))
              (start-date (plist-get start ':date))
              (start-dateTime (plist-get start ':dateTime))
              (start-dateTime-decoded (google-calendar/decode start-dateTime))
              (end (plist-get item ':end))
              (end-date (plist-get end ':date))
              (end-dateTime (plist-get end ':dateTime))
              (end-dateTime-decoded (google-calendar/decode end-dateTime))
              (attendees (plist-get item ':attendees))
              (locked (plist-get item ':locked))
              (hangoutLink (plist-get item ':hangoutLink)))

         (append `(:id ,id)
                 `(:title ,summary)
                 (when locked `(:tags ("LOCKED")))
                 `(:status ,status)
                 `(:desc ,(if description description " "))
                 `(:time ,(format
                           "<%s>--<%s>"
                           (if start-dateTime start-dateTime-decoded start-date)
                           (if end-dateTime end-dateTime-decoded end-date)))
                 (when link `(:link ,link))
                 (when hangoutLink `(:hangoutLink ,hangoutLink))
                 (when creator `(:creator ,(concat (when creator-name creator-name)
                                                   (when creator-email
                                                     (concat " <" creator-email ">")))))
                 (when organizer `(:organizer ,(concat (when organizer-name
                                                         organizer-name)
                                                   (when organizer-email
                                                     (concat
                                                      " <" organizer-email ">")))))
                 (when location `(:location ,location)))))

     ;; (google-calendar/os-fetch-buglist "2013-03-02T00:00:00Z" "bateast@bat.fr.eu.org")
   #+END_SRC

** Send /bug list/ as updating events

   #+BEGIN_SRC emacs-lisp :results none
     (defun google-calendar/os-send-buglist (buglist)
       "Send BUGLIST to demo.com and return updated buglist"

       (let ((calendar-id (os-get-prop :id buglits)))
         (unless calendar-id
           (error "No calendar id defined in this list"))

         (dolist (event (os-get-prop :bugs buglist))
           (cond
            ;; new bug (no id)
            ((null (os-get-prop :id event))
                   (google-calendar/push-new-event calendar-id event))
            ;; delete bug
            ((os-get-prop :delete event)
             (google-calendar/delete-event (os-get-prop :id event) 'ask))

            ;; else, modified bug
            (t
             (google-calendar/update-event event 'ask))))))

     (defun google-calendar/push-new-event calendar-id event
       "Add new event in a google calendar"
       (let* ((event-url (concat (format google-calendar/events-url calendar-id)
                                google-calendar/key-url))
              (time (os-get-prop :time event))
              (start-end (google-calendar/get-start-end time))
              (start (car start-end))
              (end (car (cdr start-end)))
              (description (os-get-prop :desc event))
              (location (os-get-prop :location event))
              (summary (os-get-prop :title event))

              (gcal-event
               (concat `(:summary ,summary)
                       (when location `(:location ,location))
                       (when description `(:description ,description))
                       (if (and
                            (= (apply '+ start) (apply '+ (nthcdr 3 start)))
                            (= (apply '+ end) (apply '+ (nthcdr 3 end))))
                           ;; Full days event
                           `(:start (:date ,(format "%s-%s-%s"
                                                    (nth 5 start)
                                                    (nth 4 start)
                                                    (nth 3 start)))
                                    :end (:date ,(format "%s-%s-%s"
                                                    (nth 5 end)
                                                    (nth 4 end)
                                                    (nth 3 end))))
                            ;; Partial day events
                         `(:start (:dateTime ,(format "%s-%s-%sT%s:%s:%s"
                                                      (nth 5 start)
                                                      (nth 4 start)
                                                      (nth 3 start)
                                                      (nth 2 start)
                                                      (nth 1 start)
                                                      (nth 0 start)))
                                  :end (:dateTime ,(format "%s-%s-%sT%s:%s:%s"
                                                      (nth 5 end)
                                                      (nth 4 end)
                                                      (nth 3 end)
                                                      (nth 2 end)
                                                      (nth 1 end)
                                                      (nth 0 end)))))))
              (json-event (json-encode gcal-event))
              (answer (google-calendar/http-data
                       (google-calendar/url-post event-url json-event))))
         answer))

     ;(google-calendar/get-start-end "<2013-03-08 19:08:00>--<2013-03-08 22:11:00>")

   #+END_SRC

** Provide

   #+BEGIN_SRC emacs-lisp :results none
     (provide 'os-google-calendar)
   #+END_SRC


* Provide

  #+BEGIN_SRC emacs-lisp :results none
  (provide 'google-calendar)
  #+END_SRC
